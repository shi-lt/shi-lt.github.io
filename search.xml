<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>laravel框架</title>
    <url>//2020/06/04/Laravel%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>通过composer创建</p>
<pre><code class="shell">composer create-project --prefer-dist laravel/laravel blog 5.4.*</code></pre>
<h2 id="php-artisan-命令"><a href="#php-artisan-命令" class="headerlink" title="php artisan 命令"></a>php artisan 命令</h2><p>php artisan route:list # 查看路由</p>
<p>php artisan make:controller 路径/控制名 # 生成控制器文件</p>
<p>php artisan make:其他操作</p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol>
<li>在routes目录中的web.php设置</li>
<li>路由定义方式</li>
</ol>
<p>Route::请求方式(“路由表达式”,匿名函数或控制响应的方法)</p>
<ol>
<li><p>常用请求方式：</p>
<ol>
<li>get(“路由表达式”,匿名函数或控制响应的方法)</li>
<li>post(“路由表达式”,匿名函数或控制响应的方法)</li>
<li>any(“路由表达式”,匿名函数或控制响应的方法)</li>
<li>match([“请求类型”，…],”路由表达式”,匿名函数或控制响应的方法)</li>
</ol>
</li>
<li><p>路由参数(不推荐，可通过url?param传参数)</p>
<ul>
<li>必选参数{param}</li>
<li>非必选参数{param?}</li>
</ul>
</li>
<li><p>路由别名</p>
<ul>
<li>定义<pre><code class="plain">Route::get( , )-&gt;name(&quot;别名&quot;);</code></pre>
</li>
<li>可通过获取route(“别名”)<pre><code class="plain">php artisan route:list # 查看应用路由</code></pre>
</li>
</ul>
</li>
<li><p>路由群组</p>
<ul>
<li>定义<pre><code class="plain">Route::group(公共属性数组[前缀、命名空间、中间件等],回调函数)</code></pre>
</li>
</ul>
</li>
<li><p>控制器路由</p>
<p>Route::请求方法(路由表达式，“控制器名@方法”)</p>
</li>
</ol>
<h2 id="控制器接收用户输入"><a href="#控制器接收用户输入" class="headerlink" title="控制器接收用户输入"></a>控制器接收用户输入</h2><ul>
<li><p>使用门面input</p>
</li>
<li><p>input::get()</p>
</li>
<li><p>input::all()</p>
</li>
<li><p>input::only()</p>
</li>
<li><p>input::except()</p>
</li>
<li><p>input::has</p>
<p>  以上均可以获取get、post方法的信息</p>
</li>
<li><p>可在config/app.php的aliases数组中定义长串字符的别名</p>
</li>
<li><p>如命名空间</p>
<h2 id="dd（）：dump-die-用于调试输出"><a href="#dd（）：dump-die-用于调试输出" class="headerlink" title="dd（）：dump+die 用于调试输出"></a>dd（）：dump+die 用于调试输出</h2></li>
</ul>
<h2 id="“-“-与-“-”-在某种情况下等效-例如查找视图文件view-“home-index”-view-“home-index”"><a href="#“-“-与-“-”-在某种情况下等效-例如查找视图文件view-“home-index”-view-“home-index”" class="headerlink" title="“/“ 与 “.” 在某种情况下等效,例如查找视图文件view(“home.index”) == view(“home/index”)"></a>“/“ 与 “.” 在某种情况下等效,例如查找视图文件view(“home.index”) == view(“home/index”)</h2><h2 id="视图文件的命名于渲染"><a href="#视图文件的命名于渲染" class="headerlink" title="视图文件的命名于渲染"></a>视图文件的命名于渲染</h2><ul>
<li>文件名习惯小写</li>
<li>文件名单后缀是.blade.php,可以直接使用标签语法（.php不可使用，.balde.php优先级高于.php）,也可使用php原生语法<h2 id="campact-函数打包数组，php内置函数"><a href="#campact-函数打包数组，php内置函数" class="headerlink" title="campact()函数打包数组，php内置函数"></a>campact()函数打包数组，php内置函数</h2></li>
</ul>
<h2 id="模板中直接使用函数"><a href="#模板中直接使用函数" class="headerlink" title="模板中直接使用函数"></a>模板中直接使用函数</h2><pre><code class="plain">{{函数名(参数1，参数2...)}},php内置函数或laravel框架的函数</code></pre>
<h2 id="循环与选择"><a href="#循环与选择" class="headerlink" title="循环与选择"></a>循环与选择</h2><ul>
<li><p>循环</p>
<pre><code class="plain">@foreach($data $k =&gt; $v)
@endforeach</code></pre>
</li>
<li><p>选择</p>
<pre><code class="php">@if()
@elseif()
@endif</code></pre>
<h2 id="模板继承和模板包含"><a href="#模板继承和模板包含" class="headerlink" title="模板继承和模板包含"></a>模板继承和模板包含</h2></li>
<li><p>继承</p>
<pre><code class="php+HTML">父:@yield()
子：@extends(&#39;模板名&#39;)
@section() 绑定区块</code></pre>
<p>@endsection()</p>
<h2 id="模板引入外部静态文件"><a href="#模板引入外部静态文件" class="headerlink" title="模板引入外部静态文件"></a>模板引入外部静态文件</h2></li>
<li><p>继承</p>
<pre><code class="html">父:@yield()
子：@extends(&#39;模板名&#39;)
@section() 绑定区块</code></pre>
<p>@endsection()</p>
<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><p>html的方式</p>
</li>
<li><p>使用laravel封装的asset函数</p>
<h2 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h2></li>
<li><p>跨站请求伪造</p>
</li>
<li><p>全局函数csrf_token()获取Token值</p>
</li>
<li><p>html中加入代码</p>
<pre><code class="php">&lt;input type = &quot;hidden&quot; name = &quot;_token&quot; value = &quot;&lt;?php echo csrf_token(); ?&gt;&quot;
// 等价于
{{csrf_field()}}
// ajax提交使用csrf_token()</code></pre>
</li>
<li><p>laravel 默认开启csrf验证</p>
</li>
<li><p>排除某些路由进行csrf验证</p>
<p>在app/Http/Middleware/VerifyCsrfToken.php中修改</p>
</li>
</ul>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p><img src="https://images-cdn.shimo.im/HckGLPsQFao8Emob/pic_imp_error.png!thumbnail" alt="图片"></p>
<h2 id="seed（简而言之，将测试数据保存到数据库）"><a href="#seed（简而言之，将测试数据保存到数据库）" class="headerlink" title="seed（简而言之，将测试数据保存到数据库）"></a>seed（简而言之，将测试数据保存到数据库）</h2><ul>
<li>在laravel的中文文档是这样写的：Laravel 包含一个填充类可以为你的数据库填充测试数据。所有的填充类都放在 database/seeds 目录下。你可以随意为填充类命名， 但是更建议您遵守类似 UsersTableSeeder 的命名规范。通常， Laravel 默认定义了一个DatabaseSeeder 类。所以，seed的作用主要是用来填充数据库中的数据。在实际开发过程中，我们通常需要加入一些测试数据，或者保存数据库中的初始数据，防止在开发过程中遇到的数据丢失，加的话还是挺麻烦的。当然，也可以直接导出数据库的表结构和表数据。</li>
<li>测试数据较多是可用模型工厂<h2 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h2></li>
</ul>
<p>provider是laravel程序的核心所在，包括你自己的应用程序，以及所有的 Laravel 核心服务，都是通过服务提供者启动的。一般而言，我们指的是 <strong>注册</strong> 事物，包括注册服务容器绑定、事件侦听器、中间件，甚至路由。服务提供者是设置你的应用程序的中心所在。</p>
<h2 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h2><ul>
<li>repository是数据库抽象层，目的是将应用的数据库操作和核心的业务逻辑分开，保证controller的精致。</li>
<li>repository提供criteria（标准）和transformer（变压器）来解卦数据库的查询和查询结果的展示，使得各部分分离开来，解开耦合。同时repository接管model层，使得model层专注于数据模型本身的定义，例如：relationship，fillable（可填充）等<ul>
<li>ceiteria<ul>
<li>所有的Criteria都要实现Criteria接口中的apply方法。</li>
</ul>
</li>
<li>transformer<h2 id="事件（event）"><a href="#事件（event）" class="headerlink" title="事件（event）"></a>事件（event）</h2></li>
</ul>
</li>
</ul>
<p>event与监听它的的lisner类绑定</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP</title>
    <url>//2020/06/04/PHP/</url>
    <content><![CDATA[<h2 id="类中的构造方法"><a href="#类中的构造方法" class="headerlink" title="类中的构造方法"></a>类中的构造方法</h2><pre><code class="php">`function __construct(){  ...  }`</code></pre>
<h2 id="判断是否为数字或数字字符串"><a href="#判断是否为数字或数字字符串" class="headerlink" title="判断是否为数字或数字字符串"></a>判断是否为数字或数字字符串</h2><pre><code class="php">bool is_numeric ($var)</code></pre>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><pre><code class="php">(func = )function($name){
  printf($name);
}</code></pre>
<h2 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h2>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>miniprogram</title>
    <url>//2020/06/06/miniprogram/</url>
    <content><![CDATA[<h1 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h1><p>| ** 结构 **   | ** 传统web    **   | ** 微信小程序 **   |<br>|:—-|:—-:|:—-|:—-:|:—-|:—-:|<br>|  结构    |  HTML          |  WXML          |<br>|  样式    |  CSS           |  WXSS          |<br>|  逻辑    |  Javascript    |  Javascript    |<br>|  配置    |  无            |  json          |</p>
<h2 id="基本目录"><a href="#基本目录" class="headerlink" title="基本目录"></a>基本目录</h2><pre><code>pages // 入口文件
utils // 自己封装的函数工具
app.js // 全局js
app.json // 全局配置
app.wxss  // 全局样式
project.config.json  // 整个项目的描述文件</code></pre><h2 id="一个程序页面由四个文件组成"><a href="#一个程序页面由四个文件组成" class="headerlink" title="一个程序页面由四个文件组成"></a>一个程序页面由四个文件组成</h2><p>| ** 文件类型 **   | ** 必需 **   | ** 作用       **   |<br>|:—-|:—-:|:—-|:—-:|:—-|:—-:|<br>|  js          |  是      |  页面逻辑      |<br>|  wxml        |  是      |  页面结构      |<br>|  json        |  否      |  页面配置      |<br>|  wxss        |  否      |  页面样式表    |</p>
<h2 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h2><ul>
<li><p>WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合<a href="https://developers.weixin.qq.com/miniprogram/dev/component/index.html" target="_blank" rel="noopener">基础组件</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">事件系统</a>，可以构建出页面的结构。</p>
</li>
<li><p>数据绑定</p>
<pre><code class="xml">&lt;view&gt; {{message}} &lt;/view&gt;</code></pre>
</li>
<li><p>列表渲染</p>
<pre><code class="xml">&lt;view wx:for=&quot;{{array}}&quot;&gt; {{item}} &lt;/view&gt;</code></pre>
</li>
<li><p>条件渲染</p>
<pre><code class="xml">&lt;view wx:if=&quot;{{view == 'WEBVIEW'}}&quot;&gt; WEBVIEW &lt;/view&gt;
&lt;view wx:elif=&quot;{{view == 'APP'}}&quot;&gt; APP &lt;/view&gt;
&lt;view wx:else=&quot;{{view == 'MINA'}}&quot;&gt; MINA &lt;/view&gt;</code></pre>
</li>
<li><p>模板</p>
</li>
<li><p>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。</p>
</li>
<li><p>定义模板，使用 name 属性，作为模板的名字。然后在<code>&lt;template/&gt;</code>内定义代码片段。</p>
<pre><code class="xml">  &lt;template name=&quot;msgItem&quot;&gt;
    &lt;view&gt;
      &lt;text&gt; {{index}}: {{msg}} &lt;/text&gt;
      &lt;text&gt; Time: {{time}} &lt;/text&gt;
    &lt;/view&gt;
  &lt;/template&gt;</code></pre>
</li>
<li><p>使用模板，模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <code>&lt;wxs /&gt;</code> 模块。</p>
<pre><code class="xml">  &lt;template is=&quot;msgItem&quot; data=&quot;{{...item}}&quot;/&gt;
  &lt;--&gt;动态选择模板&lt;/--&gt;
  &lt;block wx:for=&quot;{{[1, 2, 3, 4, 5]}}&quot;&gt;
    &lt;template is=&quot;{{item % 2 == 0 ? 'even' : 'odd'}}&quot;/&gt;
  &lt;/block&gt;</code></pre>
</li>
<li><p>引用</p>
</li>
<li><p>WXML 提供两种文件引用方式<code>import</code>和<code>include</code>。</p>
</li>
<li><p>import</p>
<pre><code class="html">  &lt;import src=&quot;item.wxml&quot;/&gt; 
  import 只能引入item.wxml文件里边的template</code></pre>
</li>
<li><p>include</p>
<pre><code class="html">  &lt;include src=&quot;header.wxml&quot;/&gt;
  include 可以将目标文件除了 &lt;template/&gt; &lt;wxs/&gt; 外的整个代码引入，相当于是拷贝到 include 位置</code></pre>
<h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2></li>
<li><p>bind事件</p>
</li>
<li><p>cmd触发的事件</p>
</li>
<li><p>获取事件源</p>
</li>
</ul>
<p><img src="https://uploader.shimo.im/f/KCm1K40SN8Npvn8t.png!thumbnail" alt="图片"></p>
<p>  <img src="https://uploader.shimo.im/f/zfIKgiVXy3KWQqFq.png!thumbnail" alt="图片"></p>
<h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><ul>
<li><p>将公共部分抽取出来，定义成一个组件。</p>
</li>
<li><p>定义组件</p>
<ul>
<li>properties存放接收的数据</li>
<li>data存放组件的初始数据</li>
<li>methods存放方法</li>
</ul>
</li>
<li><p>声明组件</p>
</li>
<li><p>父向子传数据</p>
</li>
<li><p>子向父传数据</p>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2></li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>miniprogram</tag>
      </tags>
  </entry>
  <entry>
    <title>git基本使用</title>
    <url>//2020/05/06/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p>git clone</p>
<p>将github上的仓库克隆到本地磁盘并创建本地仓库</p>
</li>
</ul>
<ul>
<li><p>git pull</p>
<p>将远程远程仓库拉取到本地仓库</p>
</li>
</ul>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><ul>
<li><p>git add</p>
<p>将本地文件添加到缓存区</p>
</li>
<li><p>git commit -m</p>
<p>将缓存区内容提交到本地仓库（默认master分支）</p>
</li>
</ul>
<pre><code class="bash">  $ git commit -m &quot;test001&quot;
  [master (root-commit) 6848e60] test001
   1 file changed, 1 insertion(+)
   create mode 100644 t.txt</code></pre>
<ul>
<li><p>git push -u origin</p>
<p>将本地仓库内容推送到远程仓库（origin当前git服务器地址）</p>
</li>
</ul>
<pre><code class="bash">  $ git push -u origin master
  Enumerating objects: 3, done.
  Counting objects: 100% (3/3), done.
  Writing objects: 100% (3/3), 206 bytes | 18.00 KiB/s, done.
  Total 3 (delta 0), reused 0 (delta 0)
  To https://github.com/shi-lt/test.git
   * [new branch]      master -&gt; master
  Branch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;origin&#39;.</code></pre>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li><p>git config –global user.name</p>
<p>设置全局用户名</p>
</li>
<li><p>git config –global user.email</p>
<p>设置全局邮箱</p>
</li>
</ul>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ul>
<li><p>git init</p>
<p>初始化当前目录为一个本地仓库</p>
</li>
</ul>
<pre><code class="bash">  $ git init
  Initialized empty Git repository in E:/git/test/.git/</code></pre>
<ul>
<li><p>git remote add origin url</p>
<p>将创建的本地仓库与远程仓库进行关联</p>
</li>
</ul>
<pre><code class="bash">  $ git remote add origin https://github.com/shi-lt/test.git</code></pre>
<ul>
<li><p>git branch</p>
<p>创建分支</p>
</li>
</ul>
<pre><code class="bash">  $ git branch test</code></pre>
<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><ul>
<li><p>git log</p>
<p>查看提交记录</p>
</li>
<li><p>git branch</p>
<p>查看分支（此命令还可进行分支创建、重命名、删除）</p>
</li>
</ul>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><ul>
<li><p>git checkout</p>
<pre><code class="bash">$ git checkout test
Switched to branch &#39;test&#39;</code></pre>
</li>
<li><p>git mv</p>
<p>移动文件</p>
</li>
<li><p>git rm</p>
<p>删除文件</p>
</li>
<li><p>git merge</p>
<p>合并分支</p>
<p>未完待续。。。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>使用</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础</title>
    <url>//2020/06/30/python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><ul>
<li>输入<ul>
<li>input()</li>
<li>sys.stdin.readline() # 带有换行符‘/n’</li>
<li>快速读入的一种方法：*(open(0))，无缓冲读取整个文件，返回一个迭代器。（在屏幕中输入需要按Ctrl+Z结束输入）</li>
</ul>
</li>
<li>输出<ul>
<li>print()</li>
<li>sys.stdout.write() # 不会自动换行，只能接收一个参数，格式必须是字符串</li>
</ul>
</li>
</ul>
<hr>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串元素值不可修改，支持切片。</p>
<ul>
<li>字符串格式化<ul>
<li>%</li>
<li>“{:}”.format()</li>
</ul>
</li>
</ul>
<p>{：.2f}         保留小数点后两位</p>
<p>{：+.2f}     带符号保留小数点后两位</p>
<p>{:0f}        不带小数</p>
<p>{：0&gt;2d}        数字补零（填充左边，宽度为2）</p>
<p>{：x&lt;4d}        数字补x（填充右边，宽度为4）</p>
<p>{：，}        以逗号分隔的数字格式</p>
<p>{：.2%}        百分比格式</p>
<p>{：2e}        指数记法</p>
<p>{：&gt;10d}        右对齐（宽度为10）</p>
<p>{：&lt;10d}        左对齐（宽度为10）</p>
<p>{：^10d}        中间对齐（宽度为10）</p>
<p>{：？}        输出？进制数,b、d、o、x        分别为二进制、十进制、八进制、十六进制</p>
<p>r/R 原始字符，不进行转义</p>
<ul>
<li>内建函数</li>
</ul>
<p>str.capitalize():将字符串的第一个字符转为大写</p>
<p>str.center(width,fillchar):字符串填充</p>
<p>str.find(char,beg=0,end=len(str)):查找字符串</p>
<p>str.index(char,beg=0,end=len(str)):查找字符串</p>
<p>str.join(seq):返回通过指定字符连接序列中元素后生成的新的字符串</p>
<p>str.ljust(width,fillchar):返回一个原字符串左对齐，并使用fillchar填充至指定长度</p>
<p>str.lower():转大写为小写</p>
<p>str.lstrip():截掉字符串左边的空格或指定字符</p>
<p>str.max(str):返回字符串str中最大的字母</p>
<p>str.min(str):返回字符串str中最小的字母</p>
<p>str.replace(old,new):将字符串中的old字符替换为new</p>
<p>str.rfind(str):查找字符串，从右边开始找</p>
<p>str.rindex():查找字符串，从右边开始找</p>
<p>str.rjust(width,fillchar):右对齐，并使用fillchar填充至指定长度</p>
<p>str.rstrip():删除字符串末尾空格或指定字符</p>
<p>str.split():分割字符串</p>
<p>str.strip():去掉左右端的空格</p>
<p>str.swapcase():大写转小写，小写转大写</p>
<p>upper()：小写转为大写</p>
<p>zfill(width):返回长度为width的字符串，右对齐，填充0。</p>
<ul>
<li>字符串判断<ul>
<li>str.isalnum()  所有字符都是数字或者字母，为真返回 Ture，否则返回 False。</li>
<li>str.isalpha()   所有字符都是字母(当字符串为中文时, 也返回True)，为真返回 Ture，否则返回 False。</li>
<li>str.isdigit()     所有字符都是数字，为真返回 Ture，否则返回 False。</li>
<li>str.islower()    所有字符都是小写，为真返回 Ture，否则返回 False。</li>
<li>str.isupper()   所有字符都是大写，为真返回 Ture，否则返回 False。</li>
<li>str.istitle()      所有单词都是首字母大写，为真返回 Ture，否则返回 False。</li>
<li>str.isspace()   所有字符都是空白字符，为真返回 Ture，否则返回 False。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>元素值可修改，可进行切片。</p>
<ul>
<li>创建</li>
</ul>
<p>创建一个带有初值的一维列表 l = [1]*100</p>
<p>创建一个带有初值的二维列表 l = [[]<em>100]</em>100（浅拷贝，一个 改变则都改变）</p>
<pre><code>    l = [[] for _ in range(100)]*100</code></pre><ul>
<li>删除</li>
</ul>
<p>del list[num]</p>
<ul>
<li>查找最大值</li>
</ul>
<p>查找列表中字典某个键的最大值max(L,key=lambda x:x[key])</p>
<ul>
<li>内置方法：</li>
</ul>
<p>list.append(value)</p>
<p>list.count(value)</p>
<p>list.extend(seq)在列表末尾一次性添加多个值</p>
<p>list.index(obj)找出第一个匹配的值的索引位置</p>
<p>list.insert(index,obj)在index插入obj</p>
<p>list.pop()一出列表中的最有一个元素，并返回该值</p>
<p>list.remove(obj)移除列表中某个值的第一个匹配项</p>
<p>list.reverse()反向列表中的元素</p>
<p>list.sort(key,reverse)reverse=True降序，Flase升序（默认），key指定排序的元素，函数返回值</p>
<p>list.clear()清空列表</p>
<p>list.copy()复制列表</p>
<hr>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>元素值不可修改，不能有重复值。</p>
<ul>
<li>创建</li>
</ul>
<p>创建一个空集合：set = set()</p>
<p>创建一个有值的集合：set = {value},set = set(value)</p>
<ul>
<li>添加</li>
</ul>
<p>添加:set.add()</p>
<p>set.update()</p>
<ul>
<li>访问</li>
</ul>
<p>set[index]</p>
<ul>
<li>删除</li>
</ul>
<p>set.remove(x) 若x没有则报错</p>
<p>set.discard(x)不会报错</p>
<p>set.pop() 随机删除并返回</p>
<ul>
<li>其他</li>
</ul>
<p>len()求元素个数</p>
<p>set.clear()清空集合</p>
<p>set.difference(set)返回两个集合的差集，返回一个新的集合</p>
<p>set.difference_update(set)求两个集合的差集，没有返回值，直接在set1更新</p>
<p>set.intersection(set)返回交集</p>
<p>set.intersection(set)更新为交集</p>
<p>。。。</p>
<hr>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>键值对，python3.6以上，dict有记忆（输入顺序有记忆），键不可重复。</p>
<ul>
<li>创建</li>
</ul>
<p>创建一个空字典：dict = dict(), dict = {}</p>
<p>创建一个带有值的字典：dict = {‘key’:value}, dict = dict(key=value)</p>
<ul>
<li>访问</li>
</ul>
<p>dict[‘key’],若不存在键key则报错</p>
<p>dict.setdefault(‘key’,vlaue)没有访问到key则添加，值为value</p>
<p>dict.get(‘key’,default)没有访问到key则返回default</p>
<ul>
<li>修改</li>
</ul>
<p>dict[‘key’] = newvalue</p>
<ul>
<li>删除</li>
</ul>
<p>del dict[‘key’]</p>
<p>dict.clear()</p>
<ul>
<li>复制</li>
</ul>
<p>d2 = d1（浅拷贝）一个改变则另一个也改变</p>
<p>d2 = d1.copy() （深拷贝）一个改变则另一个也改变</p>
<ul>
<li>增加</li>
</ul>
<p>dict.update(dict)</p>
<ul>
<li>内置方法：</li>
</ul>
<p>dict.clear():删除所有元素</p>
<p>d2 = d1.cpoy():复制</p>
<p>dict.items():返回可遍历的（键，值）元组数组</p>
<p>dict.keys():返回键的一个迭代器，可使用list转换为列表</p>
<p>dict.values():返回值的一个迭代器，可使用list转为列表</p>
<p>dict.update(dict2):把dict2中的键/值对更新到dict中</p>
<p>dict.pop(key):返回键key的值，并删除</p>
<p>dict.popitem()随机返回并删除字典中的最后一对键和值</p>
<hr>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元素值不可修改，可进行切片，与字符串类似。</p>
<ul>
<li>创建</li>
</ul>
<p>一个空元组：tuple = (),tuple = tuple()</p>
<p>创建一个带有值得元组：tuple = (1,)</p>
<ul>
<li>删除</li>
</ul>
<p>del tuple</p>
<ul>
<li>增加</li>
</ul>
<p>tuple += tuple</p>
<ul>
<li>访问</li>
</ul>
<p>tuple[index]</p>
<hr>
<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><ul>
<li>查看内置函数</li>
</ul>
<p>在idle中查看内置函数dir(<strong>builtins</strong>)</p>
<ul>
<li>常用内置函数<ul>
<li>abs(x):返回x的绝对值</li>
<li>divmod(x,y):整除求余，返回一个元组，（x//y，x%y)</li>
<li>enumerate(seq):一般用于for循环遍历</li>
<li>map函数:接收一个函数f和一个可迭代对象，并通过依次作用于迭代器的每一个元素</li>
</ul>
</li>
</ul>
<p>map(func, *iterables)</p>
<ul>
<li>round(x,[,n])四舍五入有（！！！.5有时进一有时不进）</li>
<li>bin(x):返回x的二进制值</li>
<li>zip():将多个迭代器对应组成一个元祖（并行）</li>
<li>itertools.chain()：将多个迭代器合并成一个（串行）</li>
<li>*zip() :解压</li>
<li>cmp(x,y):比较x、y，python3中已移除，引入operator模块代替。</li>
<li>sorted(iterable, cmp=None, key=None, reverse=False)</li>
</ul>
<p>iterable – 可迭代对象。</p>
<p>cmp – 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0，cmp参数在python3中已废除。</p>
<p>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</p>
<p>reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）</p>
<pre><code class="python"># python3 中废除cmp参数
import functools
def cmp(a,b):
  if a &gt; b :
    return -1
  elif a &lt; b :
    return 1
  else:
    return 0

nums = [1,2,3,4,5,6]
sorted_nums = sorted(nums, key = functools.cmp_to_key(cmp))
# key 也可使用匿名函数 lambda x: (x[0][1])</code></pre>
<hr>
<h2 id="collections模块"><a href="#collections模块" class="headerlink" title="collections模块"></a>collections模块</h2><p>collections中常用的有namedtuple，deque</p>
<ul>
<li>namedtuple</li>
</ul>
<p>namedtuple:用于定义数据类型</p>
<p>e.g:Point=namedtuple(‘Point’,[‘x’,’y’])</p>
<ul>
<li>deque</li>
</ul>
<p>deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈,能用deque就不要用list（list速度较慢）</p>
<p>具有的方法：</p>
<p>append():</p>
<p>appendleft():</p>
<p>clear():</p>
<p>copy()</p>
<p>count()</p>
<p>index()</p>
<p>insert()</p>
<p>maxlen()</p>
<p>pop()</p>
<p>popleft()</p>
<p>remove()</p>
<p>reverse()</p>
<hr>
<h2 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h2><p>math.pi:圆周率</p>
<p>math.e:e的值</p>
<p>math.sqrt(x):返回x的平方根</p>
<p>math.fabs(x):返回绝对值</p>
<p>math.factorial(x):返回x的阶乘</p>
<p>math.fmod(x，y):返回x/y的余数（float）</p>
<p>math.pow(x,y):返回x的y次方</p>
<p>math.ldexp(x,i):返回x<em>(2*</em>i)</p>
<p>math.modf(x):返回x的小数部分和整数部分的元组</p>
<p>math.trunc(x):返回x的整数部分</p>
<p>math.ceil(x):向上取整</p>
<p>math.floor(x):向下取整</p>
<p>math.radians(x):角度转为弧度</p>
<p>math.degrees(x):弧度转角度</p>
<p>math.gcd(x,y):返回x、y的最大公约数</p>
<p>math.fsum(x):求和</p>
<p>三角函数…</p>
<hr>
<h2 id="itertools-模块"><a href="#itertools-模块" class="headerlink" title="itertools 模块"></a>itertools 模块</h2><p>from itertools import combinations,permutations</p>
<p>combinations：组合</p>
<p>permutations：排列</p>
<hr>
<h2 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h2><p>datetime.date.today():获取当前日期</p>
<p>datetime.date(year,month,day):返回一个datetime类</p>
<p>date = today + datetime.timedelta(days=1):昨天的日期</p>
<p>date.strftime(‘%Y%m%d’):格式化</p>
<pre><code class="python">import datetime
y = input().strip()
d = int(input().strip())
s = datetime.datetime.strptime(y + &#39;-1-1&#39;, &quot;%Y-%m-%d&quot;)
ans = s + datetime.timedelta(days=d - 1)
print(ans.month)
print(ans.day)</code></pre>
<hr>
<h2 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h2><p>time.time()：获取当前时间戳</p>
<hr>
<h2 id="calendar模块"><a href="#calendar模块" class="headerlink" title="calendar模块"></a>calendar模块</h2><p>calendar.isleap(year):判断是否是闰年</p>
<hr>
<h2 id="heapq堆"><a href="#heapq堆" class="headerlink" title="heapq堆"></a>heapq堆</h2><p>堆是一种数据结构，它是一颗完全二叉树。最小堆则是在堆的基础增加了新的规则，它的根结点的值是最小的，而且它的任意结点的父结点的值都小于或者等于其左右结点的值。因为二进制堆可以使用有组织的列表或数组来表示，所以元素N的子元素位于位置2 * N + 1和2 * N + 2。这种布局使重新安排堆成为可能，因此在添加或删除项时不需要重新分配那么多内存.</p>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>字符&lt;=&gt;ASCII码</li>
</ul>
<p>ord(c)&lt;=&gt;chr(a)</p>
<ul>
<li>global 定义全局变量，定义全局变量不能赋初值</li>
</ul>
<p>函数内引用全局变量需要用global进行声明、</p>
<hr>
<h2 id="歪脑筋"><a href="#歪脑筋" class="headerlink" title="歪脑筋"></a>歪脑筋</h2><ul>
<li>统计列表中出现次数最多的元素<pre><code class="python">max(set(test),key=test.count)</code></pre>
</li>
<li>支持链式比较<pre><code class="python">print(1&lt;3&lt;4) # True</code></pre>
</li>
<li>三元运算符<pre><code class="python">x = 10 if (y == 9) else 20</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本使用</title>
    <url>//2020/06/14/Markdown/</url>
    <content><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h4 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h4><h4 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h4><hr>
<p>字体</p>
<hr>
<p><em>斜体</em></p>
<p><em>斜体</em></p>
<p><strong>粗体</strong></p>
<p><strong>粗体</strong></p>
<p><strong><em>粗斜体</em></strong></p>
<p><strong><em>粗斜体</em></strong></p>
<hr>
<p>分隔线</p>
<hr>
<p>使用三个以上的的”*“、”-“、”_”</p>
<hr>
<p><del>删除线</del></p>
<hr>
<p>文字两端加上两个’~~’</p>
<hr>
<p><u>下划线</u></p>
<hr>
<p>使用”<u></u>“</p>
<hr>
<p>脚注<a href="我是脚注1。">^1</a></p>
<hr>
<p>列表</p>
<hr>
<ul>
<li>*无序列表<ul>
<li>+无序列表<ul>
<li>-无序列表</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<hr>
<blockquote>
<p>区块</p>
<blockquote>
<blockquote>
<p>区块</p>
</blockquote>
<blockquote>
<p>区快</p>
</blockquote>
</blockquote>
</blockquote>
<hr>
<p>代码</p>
<hr>
<p><code>ls # 一行简单代码</code></p>
<pre><code class="c++">int main(){
    return 0;
}
// 代码块</code></pre>
<hr>
<p>链接</p>
<hr>
<p><a href="https://baidu.com" target="_blank" rel="noopener">百度</a></p>
<hr>
<p>图片</p>
<hr>
<p><img src="https://uploader.shimo.im/f/BId9QA1PwFXHSO14.jpeg!thumbnail" alt="图片"></p>
<hr>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Welcome to my blog</title>
    <url>//2020/06/06/welcome/</url>
    <content><![CDATA[<h1 id="Welcome-to-my-blog"><a href="#Welcome-to-my-blog" class="headerlink" title="Welcome to my blog."></a>Welcome to my blog.</h1><h1 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客."></a>欢迎来到我的博客.</h1><p><img src="https://uploader.shimo.im/f/yg7LQxUsMZ5ICvHa.png!thumbnail" alt="图片"></p>
]]></content>
      <categories>
        <category>welcome</category>
      </categories>
      <tags>
        <tag>welcome</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel项目配置</title>
    <url>//2020/06/04/laravel%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p>1、文件权限设置（若无权访问则需要设置）</p>
<pre><code> chmod -R 0777 storage

 chmod -R 0777 bootstrap

 chmod -R 0777 public</code></pre><p> 2、第三方插件安装（在项目根目录下，生成vendor文件夹及下载第三方插件）</p>
<pre><code> composer install</code></pre><p>3、创建自动加载（设置自动加载）</p>
<pre><code> composer dump-autoload</code></pre><p>4、为项目创建一个key</p>
<pre><code> php artisan key:generate</code></pre><p>5、为项目的仓库创建一个链接（在项目根目录下执行，）</p>
<pre><code> php artisan storage:link</code></pre><p>6、静态资源发布（将第三方插件中的静态文件发布到public目录下）</p>
<pre><code> php artisan vendor:publish --all</code></pre>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel框架环境搭建</title>
    <url>//2020/06/04/PHP%20laravel%E6%A1%86%E6%9E%B6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="中文手册链接"><a href="#中文手册链接" class="headerlink" title="中文手册链接"></a>中文手册链接</h2><pre><code>1、[https://learnku.com/docs/laravel/5.5](https://learnku.com/docs/laravel/5.5)

2、[https://xueyuanjun.com/post/7629.html](https://xueyuanjun.com/post/7629.html)</code></pre><h2 id="使用docker进行环境配置教程链接"><a href="#使用docker进行环境配置教程链接" class="headerlink" title="使用docker进行环境配置教程链接"></a>使用docker进行环境配置教程链接</h2><pre><code>1、[https://laradock-docs.linganmin.cn/zh/getting-started/#%E5%AE%89%E8%A3%85](https://laradock-docs.linganmin.cn/zh/getting-started/#%E5%AE%89%E8%A3%85)

2、[https://blog.csdn.net/weixin_30369041/article/details/98137743](https://blog.csdn.net/weixin_30369041/article/details/98137743)</code></pre>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
